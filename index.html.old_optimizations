<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initia          .photo-viewer-image img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            image-orientation: from-image; /* Use EXIF orientation */
            transform-origin: center;
            transition: transform 0.3s ease;=1.0">
    <title>Photo Heatmap Viewer - Simplified</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet.heat@0.2.0/dist/leaflet-heat.js"></script>
    <!-- Add MarkerCluster if you want clustering -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <style>
        body { 
            margin: 0; 
            padding: 0;
            font-family: Arial, sans-serif;
        }
        #map { 
            width: 100%; 
            height: 100vh; 
        }
        .controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }
        .debug-panel {
            position: absolute;
            bottom: 10px;
            left: 10px;
            z-index: 1000;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            max-width: 400px;
            max-height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 12px;
        }
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        .loading button {
            margin-top: 20px;
            padding: 10px 20px;
            background: #4CAF50;
            border: none;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
        
        /* Photo Viewer Styles */
        .photo-viewer-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.85);
            z-index: 2000;
            align-items: center;
            justify-content: center;        }        
        
        .photo-viewer-container {
            position: relative;
            width: 95%;
            max-width: 1400px;
            height: 90%;
            background-color: #fff;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
        }

        .photo-viewer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            border-bottom: 1px solid #eee;
        }

        .photo-viewer-title {
            font-size: 18px;
            font-weight: bold;
        }

        .photo-viewer-close {
            font-size: 24px;
            cursor: pointer;
            background: none;
            border: none;
            color: #666;
        }

        .photo-viewer-content {
            flex: 1;
            display: flex;
            position: relative;
            overflow: hidden;        }            .photo-viewer-image {
            flex: 5; /* Give the image even more space */
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 5px;
            background-color: #000; /* Dark background for better contrast */
            position: relative;
            overflow: hidden;
            min-height: 500px; /* Ensure minimum height */
        }
          .photo-viewer-image img {
            max-width: 90%;
            max-height: 90%;
            object-fit: contain;            
            transform-origin: center center;
            transition: transform 0.3s ease;
            margin: auto; /* Center the image */
            display: block; /* Remove any inline behavior */
            box-shadow: 0 0 10px rgba(0,0,0,0.3); /* Add subtle shadow for better visibility */
        }
        
        .photo-viewer-info {
            flex: 1; /* Make info panel take less space */
            width: 250px;
            min-width: 220px;
            padding: 15px;
            border-left: 1px solid #eee;
            overflow-y: auto;
        }

        .photo-info-item {
            margin-bottom: 15px;
        }

        .photo-info-label {
            font-weight: bold;
            margin-bottom: 5px;
            color: #555;
        }

        .photo-viewer-footer {
            display: flex;
            justify-content: space-between;
            padding: 10px 20px;
            border-top: 1px solid #eee;
        }

        .photo-viewer-nav {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .photo-viewer-counter {
            font-size: 14px;
            color: #666;
        }

        .photo-nav-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

        .photo-nav-btn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        
        /* Image controls */
        .image-controls {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 5px;
            border-radius: 4px;
            display: flex;
            gap: 5px;
        }
        
        .image-control-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .image-control-btn:hover {
            background-color: #3e8e41;
        }
        
        /* Additional responsive styles */
        @media (max-width: 768px) {
            .photo-viewer-container {
                width: 95%;
                height: 95%;
                max-width: none;
            }
            
            .photo-viewer-content {
                flex-direction: column;
            }
            
            .photo-viewer-image {
                flex: 2;
            }
            
            .photo-viewer-info {
                width: auto;
                border-left: none;
                border-top: 1px solid #eee;
            }
        }
        
        /* Photo cluster styling */
        .marker-cluster {
            background-color: rgba(76, 175, 80, 0.6);
            border-radius: 50%;
            text-align: center;
            color: white;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .marker-cluster div {
            margin: 5px;
        }
        
        /* Zoom controls */
        .photo-zoom-controls {
            position: absolute;
            bottom: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
        }
        
        .photo-zoom-controls button {
            width: 30px;
            height: 30px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }
        
        .photo-zoom-controls button:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }
		
		.photo-viewer-image {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.photo-viewer-image img {
    transition: transform 0.3s ease;
    object-fit: contain;
}
    </style>
</head>
<body>
    <div id="map"></div>
    <div class="controls">
        <h3>Photo Heatmap</h3>
        <div>
            <label for="intensity">Intensity: </label>
            <input type="range" id="intensity" min="1" max="30" value="15">
        </div>
        <div>
            <label for="radius">Radius: </label>
            <input type="range" id="radius" min="5" max="50" value="25">
        </div>
        <div>
            <input type="checkbox" id="showMarkers" checked>
            <label for="showMarkers">Show Photos</label>
        </div>
        <div>
            <button id="updateMap">Update Map</button>
        </div>
        <div id="photoCount"></div>
    </div>
    <div class="debug-panel" id="debugPanel"></div>
    <div class="loading" id="loading">
        <h2>Loading photo data...</h2>
        <p>Please wait while we load your photo data.</p>
        <button onclick="location.reload()">Retry</button>
    </div>
    
    <!-- Photo Viewer Dialog -->
    <div id="photoViewerOverlay" class="photo-viewer-overlay">
        <div class="photo-viewer-container">
            <div class="photo-viewer-header">
                <div class="photo-viewer-title">Photo Viewer</div>
                <button class="photo-viewer-close" id="closePhotoViewer">&times;</button>
            </div>            <div class="photo-viewer-content">            <div class="photo-viewer-image">
                    <img id="photoViewerImg" src="" alt="Photo">                    <div class="image-controls">                        <button class="image-control-btn" id="rotateLeftBtn" title="Rotate Left ([ or L key)">↺</button>
                        <button class="image-control-btn" id="rotateRightBtn" title="Rotate Right (] key)">↻</button>
                        <button class="image-control-btn" id="zoomInBtn" title="Zoom In (+ key)">+</button>
                        <button class="image-control-btn" id="zoomOutBtn" title="Zoom Out (- key)">-</button>
                        <button class="image-control-btn" id="resetViewBtn" title="Reset View (0 or R key)">R</button>
                    </div>
                </div>
                <div class="photo-viewer-info">
                    <div class="photo-viewer-detail">
                        <div class="photo-info-item">
                            <div class="photo-info-label">Filename:</div>
                            <div id="photoInfoFilename"></div>
                        </div>
                        <div class="photo-info-item">
                            <div class="photo-info-label">Date:</div>
                            <div id="photoInfoDate"></div>
                        </div>
                        <div class="photo-info-item">
                            <div class="photo-info-label">Location:</div>
                            <div id="photoInfoLocation"></div>
                        </div>
                        <div class="photo-info-item">
                            <div class="photo-info-label">Path:</div>
                            <div id="photoInfoPath"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="photo-viewer-footer">
                <div class="photo-viewer-nav">
                    <button id="prevPhotoBtn" class="photo-nav-btn">&lt; Previous</button>
                    <div class="photo-viewer-counter">
                        <span id="currentPhotoIndex">1</span> / <span id="totalPhotos">1</span>
                    </div>
                    <button id="nextPhotoBtn" class="photo-nav-btn">Next &gt;</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Debug logging function
        function debugLog(message, data) {
            const timestamp = new Date().toLocaleTimeString();
            console.log(`[${timestamp}] ${message}`, data || '');
            
            const panel = document.getElementById('debugPanel');
            if (panel) {
                let dataText = '';
                if (data) {
                    try {
                        dataText = typeof data === 'object' ? 
                            `<pre>${JSON.stringify(data, null, 2)}</pre>` : 
                            `<pre>${data}</pre>`;
                    } catch (e) {
                        dataText = '<pre>[Complex object]</pre>';
                    }
                }
                panel.innerHTML += `<div><strong>[${timestamp}]</strong> ${message} ${dataText}</div>`;
                panel.scrollTop = panel.scrollHeight;
            }
        }
        
        // Catch all errors
        window.addEventListener('error', function(e) {
            debugLog('ERROR: ' + e.message);
            return false;
        });

        // Initialize map
        debugLog('Initializing map');
        const map = L.map('map').setView([0, 0], 2);
        
        // Add tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        }).addTo(map);
        
        // Global variables
        let photoData = [];
        let filteredData = [];
        let heatLayer = null;
        let markerGroup = null;
        
        // Photo viewer variables
        let currentClusterPhotos = [];
        let currentPhotoIdx = 0;
        
        // DOM elements
        const intensitySlider = document.getElementById('intensity');
        const radiusSlider = document.getElementById('radius');
        const showMarkersCheckbox = document.getElementById('showMarkers');
        const updateMapButton = document.getElementById('updateMap');
        const photoCountElement = document.getElementById('photoCount');
        const loadingElement = document.getElementById('loading');
          // Photo viewer DOM elements
        const photoViewerOverlay = document.getElementById('photoViewerOverlay');
        const photoViewerImg = document.getElementById('photoViewerImg');
        const photoInfoFilename = document.getElementById('photoInfoFilename');
        const photoInfoDate = document.getElementById('photoInfoDate');
        const photoInfoLocation = document.getElementById('photoInfoLocation');
        const photoInfoPath = document.getElementById('photoInfoPath');
        const currentPhotoIndex = document.getElementById('currentPhotoIndex');
        const totalPhotos = document.getElementById('totalPhotos');
        const prevPhotoBtn = document.getElementById('prevPhotoBtn');
        const nextPhotoBtn = document.getElementById('nextPhotoBtn');
        const closePhotoViewerBtn = document.getElementById('closePhotoViewer');
        
        // Image control buttons
        const rotateLeftBtn = document.getElementById('rotateLeftBtn');
        const rotateRightBtn = document.getElementById('rotateRightBtn');
        const zoomInBtn = document.getElementById('zoomInBtn');
        const zoomOutBtn = document.getElementById('zoomOutBtn');        const resetViewBtn = document.getElementById('resetViewBtn');
          // Image transformations
        let currentZoom = 1;
        let currentRotation = 0;
        
        // Load photo data
        function loadPhotoData() {
            debugLog('Loading photo data');
            
            fetch('photo_heatmap_data.json')
                .then(response => {
                    debugLog(`Response status: ${response.status}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    debugLog(`Successfully loaded ${data.length} photos`);
                    
                    // Store data globally
                    photoData = data;
                    
                    // Count photos with GPS coords
                    const withGPS = data.filter(photo => 
                        photo.latitude != null && photo.longitude != null);
                    debugLog(`Photos with GPS: ${withGPS.length}/${data.length}`);
                    
                    // Update photo count display
                    photoCountElement.textContent = `${withGPS.length} photos with location`;
                    
                    // Hide loading screen
                    loadingElement.style.display = 'none';
                    
                    // Create initial visualization
                    updateVisualization();
                })
                .catch(error => {
                    debugLog(`Error loading photo data: ${error.message}`);
                    loadingElement.innerHTML = `
                        <h2>Error Loading Data</h2>
                        <p>${error.message}</p>
                        <button onclick="location.reload()">Retry</button>
                    `;
                });
        }
        
        // Update map visualization
        function updateVisualization() {
            debugLog('Updating visualization');
            
            // Filter photos with GPS coordinates
            const validPhotos = photoData.filter(photo => 
                photo.latitude != null && photo.longitude != null);
            
            if (validPhotos.length === 0) {
                debugLog('No photos with valid GPS coordinates');
                return;
            }
            
            // Create heatmap
            updateHeatmap(validPhotos);
            
            // Create markers if enabled
            if (showMarkersCheckbox.checked) {
                updateMarkers(validPhotos);
            } else if (markerGroup) {
                map.removeLayer(markerGroup);
            }
            
            // Fit map to bounds
            const bounds = L.latLngBounds(validPhotos.map(photo => [photo.latitude, photo.longitude]));
            map.fitBounds(bounds);
        }
        
        // Update heatmap
        function updateHeatmap(photos) {
            debugLog('Updating heatmap');
            
            // Remove existing heatmap if present
            if (heatLayer) {
                map.removeLayer(heatLayer);
            }
            
            // Create heatmap points
            const points = photos.map(photo => [
                photo.latitude, 
                photo.longitude, 
                1  // Weight
            ]);
            
            // Create new heatmap layer
            heatLayer = L.heatLayer(points, {
                radius: parseInt(radiusSlider.value),
                blur: 15,
                maxZoom: 10,
                gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'},
                intensity: parseInt(intensitySlider.value) / 10
            }).addTo(map);
            
            debugLog(`Heatmap created with ${points.length} points`);
        }
        
        // Update markers
        function updateMarkers(photos) {
            debugLog('Updating markers');
            
            // Remove existing markers if present
            if (markerGroup) {
                map.removeLayer(markerGroup);
            }
            
            // Use MarkerClusterGroup if available, otherwise use LayerGroup
            if (typeof L.markerClusterGroup === 'function') {
                debugLog('Using MarkerClusterGroup');
                markerGroup = L.markerClusterGroup({
                    maxClusterRadius: 50,
                    spiderfyOnMaxZoom: false,
                    
                    // Add cluster click handler to show photo viewer
                    iconCreateFunction: function(cluster) {
                        return L.divIcon({
                            html: '<div>' + cluster.getChildCount() + '</div>',
                            className: 'marker-cluster marker-cluster-small',
                            iconSize: L.point(40, 40)
                        });
                    },
                    
                    // Handle cluster click to show photos in the cluster
                    clusterClick: function(cluster) {
                        debugLog(`Cluster clicked with ${cluster.getChildCount()} markers`);
                        
                        // Get all markers in this cluster
                        const markers = cluster.getAllChildMarkers();
                        
                        // Extract photo data from markers
                        const clusterPhotos = markers.map(marker => marker.photoData)
                            .filter(photo => photo); // Filter out undefined values
                            
                        if (clusterPhotos.length > 0) {
                            debugLog(`Opening photo viewer with ${clusterPhotos.length} photos`);
                            // Open the photo viewer with these photos
                            openPhotoViewer(clusterPhotos);
                            
                            // Prevent default zoom action
                            return false;
                        }
                        
                        return true;
                    }
                });
                
                // Attach the custom clusterClick handler
                markerGroup.on('clusterclick', function(e) {
                    if (typeof this.options.clusterClick === 'function') {
                        if (this.options.clusterClick(e.layer) === false) {
                            e.originalEvent.stopPropagation();
                            e.originalEvent.preventDefault();
                        }
                    }
                });
                
            } else {
                debugLog('Using LayerGroup (MarkerClusterGroup not available)');
                markerGroup = L.layerGroup();
            }
            
            // Add markers for each photo
            photos.forEach(photo => {
                debugLog(`Processing photo: ${photo.filename} at [${photo.latitude}, ${photo.longitude}]`);
                
                const marker = L.marker([photo.latitude, photo.longitude]);
                
                // Create popup content
                const popupContent = `
                    <div>
                        <strong>${photo.filename || 'Unknown'}</strong><br>
                        ${photo.datetime ? new Date(photo.datetime).toLocaleString() : 'No date'}<br>
                        <img src="photos/${encodeURIComponent(photo.filename)}" style="max-width: 150px; max-height: 150px;" onerror="this.onerror=null;this.src='https://placehold.co/150x150?text=No+Image'">
                    </div>
                `;
                marker.bindPopup(popupContent);
                
                // Store photo data in marker for later use
                marker.photoData = photo;
                
                // Add click handler for individual markers
                marker.on('click', function(e) {
                    // Find all photos at this location
                    const photosAtSameLocation = photos.filter(p => 
                        p.latitude === photo.latitude && 
                        p.longitude === photo.longitude
                    );
                    
                    debugLog(`Marker clicked: ${photo.filename} (${photosAtSameLocation.length} photos at this location)`);
                    
                    // Find the index of this photo
                    const photoIndex = photosAtSameLocation.findIndex(p => p.id === photo.id);
                    
                    // Open the photo viewer with all photos at this location
                    openPhotoViewer(photosAtSameLocation, photoIndex >= 0 ? photoIndex : 0);
                    
                    // Since we're opening our custom viewer, prevent the popup
                    e.originalEvent.stopPropagation();
                    L.DomEvent.stopPropagation(e);
                });
                
                // Add marker to group
                markerGroup.addLayer(marker);
                
                debugLog(`Added marker for ${photo.filename}`);
            });
            
            // Add marker group to map
            map.addLayer(markerGroup);
            
            debugLog(`Successfully added ${photos.length} markers to map`);
        }
        
        // Photo viewer functions
        function openPhotoViewer(photos, startIndex = 0) {
            if (!photos || photos.length === 0) {
                debugLog('Cannot open photo viewer: No photos provided');
                return;
            }
            
            debugLog(`Opening photo viewer with ${photos.length} photos, starting at index ${startIndex}`);
            
            currentClusterPhotos = [...photos];
            currentPhotoIdx = Math.min(startIndex, photos.length - 1);
            totalPhotos.textContent = photos.length;
            
            updatePhotoViewerContent();
            photoViewerOverlay.style.display = 'flex';
        }
        
        function closePhotoViewer() {
            debugLog('Closing photo viewer');
            photoViewerOverlay.style.display = 'none';
        }
        
        function updatePhotoViewerContent() {
            const photo = currentClusterPhotos[currentPhotoIdx];
            if (!photo) {
                debugLog('Cannot update photo viewer: No photo at current index');
                return;
            }
            
            debugLog(`Updating photo viewer content to photo ${currentPhotoIdx + 1}/${currentClusterPhotos.length}`);
            
            // Update navigation buttons state
            prevPhotoBtn.disabled = currentPhotoIdx <= 0;
            nextPhotoBtn.disabled = currentPhotoIdx >= currentClusterPhotos.length - 1;
              // Update counter
            currentPhotoIndex.textContent = currentPhotoIdx + 1;
              // Reset view when showing a new photo
            currentZoom = 1;
            currentRotation = 0;
            updateImageTransform();            // Update image and info
            debugLog(`Loading image for ${photo.filename}`);
            
            // Show loading indicator
            photoViewerImg.style.opacity = '0.3';
            
            // Clear previous image first to prevent flashing
            photoViewerImg.src = '';
            
            // Set new image with error handling
            const fullImageUrl = `photos/${encodeURIComponent(photo.filename)}`;
            debugLog(`Image URL: ${fullImageUrl}`);
            
            photoViewerImg.src = fullImageUrl;
            
            photoViewerImg.onerror = () => {
                debugLog(`Failed to load image for ${photo.filename}, using placeholder`);
                photoViewerImg.src = 'https://placehold.co/800x600?text=Photo+Unavailable';
                photoViewerImg.style.opacity = '1';
            };
              // Handle successful load
            photoViewerImg.onload = function() {
    debugLog(`Successfully loaded image for ${photo.filename}, dimensions: ${this.naturalWidth}x${this.naturalHeight}`);
    
    // Make sure the image is visible
    this.style.opacity = '1';
    
    // Reset any previous sizing
    this.style.maxWidth = '';
    this.style.maxHeight = '';
    this.style.width = '';
    this.style.height = '';
    
    // Calculate aspect ratio
    const aspectRatio = this.naturalWidth / this.naturalHeight;
    const isPortrait = aspectRatio < 1;
    
    // Set appropriate dimensions based on orientation
    if (isPortrait) {
        this.style.maxHeight = '85vh';
        this.style.width = 'auto';
    } else {
        this.style.maxWidth = '85vw';
        this.style.height = 'auto';
    }
    
    debugLog(`Image orientation: ${isPortrait ? 'portrait' : 'landscape'}, aspect ratio: ${aspectRatio.toFixed(2)}`);
    
    // Apply any existing transformations
    updateImageTransform();
};
            
            photoInfoFilename.textContent = photo.filename || 'Unknown';
            photoInfoDate.textContent = photo.datetime ? new Date(photo.datetime).toLocaleString() : 'Unknown';
            photoInfoLocation.textContent = (photo.latitude != null && photo.longitude != null) ? 
                `${photo.latitude.toFixed(6)}, ${photo.longitude.toFixed(6)}` : 'Not available';
            photoInfoPath.textContent = photo.path || 'Unknown';
        }
        
        function showNextPhoto() {
            if (currentPhotoIdx < currentClusterPhotos.length - 1) {
                currentPhotoIdx++;
                debugLog(`Moving to next photo: ${currentPhotoIdx + 1}/${currentClusterPhotos.length}`);
                updatePhotoViewerContent();
            }
        }
        
        function showPreviousPhoto() {
            if (currentPhotoIdx > 0) {
                currentPhotoIdx--;
                debugLog(`Moving to previous photo: ${currentPhotoIdx + 1}/${currentClusterPhotos.length}`);
                updatePhotoViewerContent();
            }
        }

        // Event listeners
        updateMapButton.addEventListener('click', updateVisualization);
        
        showMarkersCheckbox.addEventListener('change', function() {
            debugLog(`Show markers changed: ${this.checked}`);
            updateVisualization();
        });
          // Photo viewer event listeners
        closePhotoViewerBtn.addEventListener('click', closePhotoViewer);
        prevPhotoBtn.addEventListener('click', showPreviousPhoto);
        nextPhotoBtn.addEventListener('click', showNextPhoto);          // Image control event listeners
        rotateLeftBtn.addEventListener('click', rotateLeft);
        rotateRightBtn.addEventListener('click', rotateRight);
        // Note: zoomIn, zoomOut and resetView are handled by the existing event listeners
        // through the setZoomLevel function
          // Keyboard navigation in photo viewer
        document.addEventListener('keydown', function(e) {
            if (photoViewerOverlay.style.display === 'flex') {
                if (e.key === 'Escape') {
                    closePhotoViewer();
                } else if (e.key === 'ArrowRight') {
                    showNextPhoto();
                } else if (e.key === 'ArrowLeft') {
                    showPreviousPhoto();
                } else if (e.key === '+' || e.key === '=') {
                    // + or = key for zooming in (= is easier to press without shift)
                    zoomIn();
                } else if (e.key === '-') {
                    // - key for zooming out
                    zoomOut();                } else if (e.key === '0' || e.key === 'r' || e.key === 'R') {
                    // 0 or r key for reset
                    resetView();
                } else if (e.key === '[' || e.key === 'l' || e.key === 'L') {
                    // [ or l key for rotate left
                    rotateLeft();
                } else if (e.key === ']') {
                    // ] key for rotate right
                    rotateRight();
                }
            }
        });
        
        // Load data when page is loaded
        window.addEventListener('load', function() {
            debugLog('Page loaded, fetching photo data...');
            loadPhotoData();
        });
          // Zoom control functions
        function setZoomLevel(level) {
            currentZoom = level;
            // Use updateImageTransform to ensure consistency with rotation
            updateImageTransform();
            debugLog(`Zoom level set to ${currentZoom}`);
        }
        
        zoomInBtn.addEventListener('click', () => {
            setZoomLevel(Math.min(currentZoom + 0.25, 4));
        });
        
        zoomOutBtn.addEventListener('click', () => {
            setZoomLevel(Math.max(currentZoom - 0.25, 0.5));
        });
          resetViewBtn.addEventListener('click', () => {
            setZoomLevel(1);
        });          // Image transformation functions
        function zoomIn() {
            // Use setZoomLevel to ensure consistency
            setZoomLevel(Math.min(currentZoom + 0.25, 4));
            debugLog(`Zoomed in to ${currentZoom}x`);
        }
        
        function zoomOut() {
            // Use setZoomLevel to ensure consistency
            setZoomLevel(Math.max(currentZoom - 0.25, 0.5));
            debugLog(`Zoomed out to ${currentZoom}x`);
        }
        
        function rotateLeft() {
            // Normalize rotation to keep it in the range of -360 to 360 degrees
            currentRotation = (currentRotation - 90) % 360;
            updateImageTransform();
            debugLog(`Rotated left to ${currentRotation} degrees`);
        }
        
        function rotateRight() {
            // Normalize rotation to keep it in the range of -360 to 360 degrees
            currentRotation = (currentRotation + 90) % 360;
            updateImageTransform();
            debugLog(`Rotated right to ${currentRotation} degrees`);
        }
        
        function resetView() {
            // Reset both zoom and rotation
            currentZoom = 1;
            currentRotation = 0;
            updateImageTransform();
            debugLog(`Reset view to default`);
        }
          function updateImageTransform() {
    // Apply transform with proper origin point
    const transform = `scale(${currentZoom}) rotate(${currentRotation}deg)`;
    photoViewerImg.style.transform = transform;
    photoViewerImg.style.transformOrigin = 'center center';
    
    debugLog(`Applied transform: ${transform}`);
}
    </script>
</body>
</html>
